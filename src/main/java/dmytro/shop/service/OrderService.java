package dmytro.shop.service;import dmytro.shop.dto.request.OrderRequest;import dmytro.shop.dto.request.PaginationRequest;import dmytro.shop.dto.response.DataResponse;import dmytro.shop.dto.response.OrderResponse;import dmytro.shop.entiti.Order;import dmytro.shop.entiti.Product;import dmytro.shop.entiti.ProductForOrder;import dmytro.shop.exception.WrongInputDataException;import dmytro.shop.repository.OrderRepository;import dmytro.shop.repository.ProductForOrderRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.stream.Collectors;@Servicepublic class OrderService {    @Autowired    private OrderRepository orderRepository;    @Autowired    private ProductForOrderRepository productForOrderRepository;    @Autowired    protected ProductService productService;    public OrderResponse save (OrderRequest orderRequest) {        return new OrderResponse(orderRepository.save(orderRequestToOrder(orderRequest, null)));    }    public List<OrderResponse> findAll() {        return orderRepository.findAll().stream()                .map(OrderResponse::new)                .collect(Collectors.toList());    }    public void delete(Long id) {        orderRepository.delete(findOne(id));    }    public Order findOne(Long id) {        return orderRepository.findById(id)                .orElseThrow(() -> new WrongInputDataException                        ("Product with" + id + "not exists"));    }    public OrderResponse update(OrderRequest orderRequest, Long id){        return new OrderResponse(orderRepository.save(orderRequestToOrder(orderRequest, findOne(id))));    }    private Order orderRequestToOrder(OrderRequest orderRequest, Order order) {        if (order == null) {            order = new Order();            order.setDate(LocalDateTime.now());        }        return order;    }////        List<Product> collect = orderRequest.getProductsId().stream().map(productForOrderService::findOne).collect(Collectors.toList());//        order.setProductForOrders(collect);//        return order;//    }    public DataResponse<OrderResponse> findPage(PaginationRequest paginationRequest){        Page<Order> page = orderRepository.findAll(paginationRequest.toPageable());        List<OrderResponse> collect = page.get().map(OrderResponse::new).collect(Collectors.toList());        return new DataResponse<>(page.getTotalPages(), page.getTotalElements(), collect);    ////////??????????    }}